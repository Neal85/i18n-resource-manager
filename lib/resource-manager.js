// Generated by CoffeeScript 1.7.1
(function() {
  var DefaultOptions, ResourceManager, ResourceUtils, Utils, fs, path;

  path = require('path');

  fs = require('fs');

  Utils = require('./utils');

  DefaultOptions = require('./default-options');

  ResourceManager = (function() {
    function ResourceManager(options) {
      this.options = options;
      this.resourceUtils = new ResourceUtils(this.options);
    }

    return ResourceManager;

  })();

  ResourceUtils = (function() {
    function ResourceUtils(options) {
      this.options = options;
      this.lang = "";
      this.country = "";
      this.options = Utils.FillObject(DefaultOptions, this.options, "full");
      this.rules = this.resolveRules(this.options);
      this.buildRules();
    }

    ResourceUtils.prototype.resolveRules = function(options) {
      var item, key, p, reg, results, rule, rules, _i, _len;
      results = new Array();
      key = options.key;
      rules = options.rules;
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        item = rules[_i];
        rule = item;
        for (p in key) {
          reg = new RegExp('({' + p + '})', 'g');
          rule = rule.replace(reg, key[p]);
        }
        if (rule.indexOf('{') !== -1 || rule.indexOf('}') !== -1) {
          throw new Error('Resolve rules error! rule: ' + item);
        }
        results.push(rule);
      }
      return results;
    };

    ResourceUtils.prototype.buildRules = function() {
      return console.log(this.buildRulesForFiles());
    };

    ResourceUtils.prototype.buildRulesForFiles = function() {
      var folderPhyPath, i, relativePath, results, _i, _len, _ref;
      results = {};
      _ref = this.rules;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        relativePath = _ref[i];
        folderPhyPath = path.join(this.options.phyPath, relativePath);
        if (fs.existsSync(folderPhyPath)) {
          this.buildFiles(results, folderPhyPath, relativePath, null);
        }
      }
      return results;
    };

    ResourceUtils.prototype.buildFiles = function(files, folderPath, relativePath, prefix) {
      var childes, fName, fStat, i, itemPhyPath, itemRelativePath, _i, _len, _results;
      childes = fs.readdirSync(folderPath);
      _results = [];
      for (i = _i = 0, _len = childes.length; _i < _len; i = ++_i) {
        fName = childes[i];
        itemPhyPath = path.join(folderPath, fName);
        itemRelativePath = path.join(relativePath, fName);
        fName = prefix ? prefix + '-' + fName : fName;
        fStat = fs.statSync(itemPhyPath);
        if (fStat.isFile()) {
          if (typeof files[fName.toLowerCase()] !== "undefined") {
            if (this.options.isMultifile) {
              _results.push(files[fName.toLowerCase()].push(itemRelativePath));
            } else {
              _results.push(files[fName.toLowerCase()] = itemRelativePath);
            }
          } else {
            if (this.options.isMultifile) {
              _results.push(files[fName.toLowerCase()] = [itemRelativePath]);
            } else {
              _results.push(files[fName.toLowerCase()] = itemRelativePath);
            }
          }
        } else if (fStat.isDirectory()) {
          if (fs.existsSync(folderPath)) {
            _results.push(this.buildFiles(files, itemPhyPath, itemRelativePath, fName));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ResourceUtils;

  })();

  module.exports = ResourceManager;

}).call(this);

//# sourceMappingURL=resource-manager.map
