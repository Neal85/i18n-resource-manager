// Generated by CoffeeScript 1.7.1
(function() {
  var DefaultOptions, ResourceManager, ResourceType, ResourceUtils, Utils, fs, path;

  path = require('path');

  fs = require('fs');

  Utils = require('./utils');

  ResourceType = {
    "OVERRIDE": 0,
    "APPEND": 1,
    "PROPERTIES": 2
  };

  DefaultOptions = {
    key: {
      platform: "_null",
      subPlatform: "_null",
      country: "US",
      resourceType: ResourceType.OVERRIDE
    },
    phyPath: process.cwd(),
    rules: ['_default/country/_default', '_default/country/{country}', '_default/{subPlatform}/country/_default', '_default/{subPlatform}/country/{country}', '{platform}/country/_default', '{platform}/country/{country}', '{platform}/{subPlatform}/country/_default', '{platform}/{subPlatform}/country/{country}']
  };

  ResourceManager = (function() {
    function ResourceManager(options) {
      this.options = options;
      this.resourceUtils = new ResourceUtils(this.options);
    }

    return ResourceManager;

  })();

  ResourceUtils = (function() {
    function ResourceUtils(options) {
      this.options = options;
      this.options = Utils.FillObject(DefaultOptions, this.options, "full");
      this.options.rules = this.resolveRules(this.options);
      this.buildRules();
    }

    ResourceUtils.prototype.resolveRules = function(opts) {
      var item, key, p, reg, results, rule, rules, _i, _len;
      results = new Array();
      key = opts.key;
      rules = opts.rules;
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        item = rules[_i];
        rule = item;
        for (p in key) {
          reg = new RegExp('({' + p + '})', 'g');
          rule = rule.replace(reg, key[p]);
        }
        if (rule.indexOf('{') !== -1 || rule.indexOf('}') !== -1) {
          throw new Error('Resolve rules error! rule: ' + item);
        }
        results.push(path.normalize(rule));
      }
      return results;
    };

    ResourceUtils.prototype.buildRules = function() {
      if (this.options.key.resourceType === ResourceType.OVERRIDE || this.options.key.resourceType === ResourceType.APPEND) {
        return console.log(this.buildFilesByRules(this.options));
      } else if (this.options.key.resourceType === ResourceType.PROPERTIES) {
        this.options.key.resourceType = ResourceType.APPEND;
        return console.log(this.buildFilesByRules(this.options));
      } else {
        throw new Error('Resource type invalid! Please check your options.resourceType.');
      }
    };

    ResourceUtils.prototype.buildFilesByRules = function(opts) {
      var folderPhyPath, i, relativePath, results, _i, _len, _ref;
      results = {};
      _ref = opts.rules;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        relativePath = _ref[i];
        folderPhyPath = path.join(opts.phyPath, relativePath);
        if (fs.existsSync(folderPhyPath)) {
          this.buildFilesByDirectory(opts, results, folderPhyPath, relativePath, null);
        }
      }
      return results;
    };

    ResourceUtils.prototype.buildFilesByDirectory = function(opts, files, folderPath, relativePath, prefix) {
      var childes, fName, fStat, i, isExists, item, itemPhyPath, itemRelativePath, rule, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      childes = fs.readdirSync(folderPath);
      _results = [];
      for (i = _i = 0, _len = childes.length; _i < _len; i = ++_i) {
        fName = childes[i];
        itemPhyPath = path.join(folderPath, fName);
        itemRelativePath = path.join(relativePath, fName);
        _ref = opts.rules;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          item = _ref[_j];
          if (item.replace(path.sep) === itemRelativePath.replace(path.sep)) {
            rule = item;
          }
        }
        if (rule !== void 0) {
          continue;
        }
        fName = prefix ? prefix + '-' + fName : fName;
        fStat = fs.statSync(itemPhyPath);
        if (fStat.isFile()) {
          if (typeof files[fName.toLowerCase()] !== "undefined") {
            if (opts.key.resourceType === ResourceType.APPEND) {
              _ref1 = files[fName.toLowerCase()];
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                item = _ref1[_k];
                if (item === itemRelativePath) {
                  isExists = item;
                }
              }
              if (!isExists) {
                _results.push(files[fName.toLowerCase()].push(itemRelativePath));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(files[fName.toLowerCase()] = itemRelativePath);
            }
          } else {
            if (opts.key.resourceType === ResourceType.APPEND) {
              _results.push(files[fName.toLowerCase()] = [itemRelativePath]);
            } else {
              _results.push(files[fName.toLowerCase()] = itemRelativePath);
            }
          }
        } else if (fStat.isDirectory()) {
          if (fs.existsSync(folderPath)) {
            _results.push(this.buildFilesByDirectory(opts, files, itemPhyPath, itemRelativePath, fName));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ResourceUtils.prototype.buildProperties = function(filesDic) {
      var filename, files, result;
      result = {};
      for (filename in filesDic) {
        files = filesDic[filename];
        if (path.extname(filename).toLowerCase() === "json") {
          result[filename] = this.handleJSONFile(files);
        } else {
          result[filename] = this.handlePropertyFile(files);
        }
      }
      return result;
    };

    ResourceUtils.prototype.handleJSONFile = function(files) {
      var data, f, obj, result, _i, _len;
      result = null;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        data = fs.ReadFileSync(f, {
          encoding: "utf8"
        });
        obj = JSON.parse(data);
        if (result === null) {
          result = obj;
        } else {
          result = Utils.FillObject(result, obj, "full");
        }
      }
      return result;
    };

    ResourceUtils.prototype.handlePropertyFile = function(files) {};

    return ResourceUtils;

  })();

  exports.ResourceType = ResourceType;

  exports.DefaultOptions = DefaultOptions;

  exports.ResourceManager = ResourceManager;

}).call(this);

//# sourceMappingURL=resource-manager.map
